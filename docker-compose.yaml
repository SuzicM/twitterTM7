version: "3.1"

services:
  api:
    build: 
      context: ./api_gateway
      dockerfile: Dockerfile
    restart: always
    container_name: "api_gateway"
    hostname: "api_gateway"
    ports:
      - 8080:8080
    depends_on:
      - user_service
      - tweet_service
    networks:
      - network



  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    restart: always
    container_name: ${USER_SERVICE_HOST}
    hostname: ${USER_SERVICE_HOST}
    environment:
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
      - MONGO_DB_URI=mongodb://root:pass@mongo:27017
      - ACCESS_TOKEN_PRIVATE_KEY=${ACCESS_TOKEN_PRIVATE_KEY}
      - ACCESS_TOKEN_PUBLIC_KEY=${ACCESS_TOKEN_PUBLIC_KEY}
      - REFRESH_TOKEN_PRIVATE_KEY=${REFRESH_TOKEN_PRIVATE_KEY}
      - REFRESH_TOKEN_PUBLIC_KEY=${REFRESH_TOKEN_PUBLIC_KEY}
    depends_on:
     mongo:
        condition: service_healthy
    networks:
      - network

  tweet_service:
    build:
      context: ./tweet_service
      dockerfile: Dockerfile
    restart: always
    container_name: ${TWEET_SERVICE_HOST}
    hostname: ${TWEET_SERVICE_HOST}
    environment:
      - TWEET_SERVICE_PORT=${TWEET_SERVICE_PORT}
      - CASS_DB=cassandra:9042
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - network

  profile_service:
    build:
      context: ./profile_service
      dockerfile: Dockerfile
    restart: always
    container_name: ${PROFILE_SERVICE_HOST}
    hostname: ${PROFILE_SERVICE_HOST}
    environment:
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
      - TWEET_SERVICE_PORT=${TWEET_SERVICE_PORT}
      - PROFILE_SERVICE_PORT=${PROFILE_SERVICE_PORT}
      - USER_SERVICE_HOST=${USER_SERVICE_HOST}
      - TWEET_SERVICE_HOST=${TWEET_SERVICE_HOST}
      - MONGO_DB_URI=mongodb://root:pass@mongo:27017
    depends_on:
     mongo:
        condition: service_healthy
    networks:
      - network

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db
    networks:
      - network
    
  cassandra:
    image: cassandra
    restart: always
    ports:
      - "9042:9042"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
    networks:
      - network


volumes:
  mongo_store:
  cass_store:


networks:
  network:
    driver: bridge

